
pub mod client \{
    use {mod_prefix}util::ResponseStream;
    use failure::Fail;
    use futures::\{Stream, Future};
    use futures_preview::compat::Future01CompatExt;
    use parking_lot::Mutex;

    use std::fmt::Debug;

    /// Common API errors.
    #[derive(Debug, Fail)]
    pub enum ApiError<R: Debug + Send + 'static> \{
        #[fail(display = "API request failed for path: \{} (code: \{})", _0, _1)]
        Failure(String, http::status::StatusCode, Mutex<R>),
        #[fail(display = "Unsupported media type in response: \{}", _0)]
        UnsupportedMediaType(String, Mutex<R>),
        #[fail(display = "An error has occurred while performing the API request: \{}", _0)]
        Reqwest(reqwest::Error),
        {{- for coder in media_coders }}
        #[fail(display = "Error en/decoding \"{coder.range | unescaped}\" data: \{}", _0)]
        {coder.error_variant | unescaped}({coder.error_ty_path | unescaped}),
        {{- endfor }}
    }

    /// HTTP Request.
    pub trait Request \{
        /// Sets the header with the given key and value.
        fn header(self, name: &'static str, value: &str) -> Self;

        /// Sets body using the given vector of bytes.
        ///
        /// **NOTE:** Appropriate `Content-Type` header must be set
        /// after calling this method.
        fn body_bytes(self, body: Vec<u8>) -> Self;

        /// Sets JSON body based on the given value.
        fn json<T: serde::Serialize>(self, value: &T) -> Self;

        /// Sets/adds query parameters based on the given value.
        ///
        /// **NOTE:** This method must be called only once. It's unspecified
        /// as to whether this appends/replaces query parameters.
        fn query<T: serde::Serialize>(self, params: &T) -> Self;
    }

    impl Request for reqwest::r#async::RequestBuilder \{
        fn header(self, name: &'static str, value: &str) -> Self \{
            reqwest::r#async::RequestBuilder::header(self, name, value)
        }

        fn body_bytes(self, body: Vec<u8>) -> Self \{
            self.body(body)
        }

        fn json<T: serde::Serialize>(self, value: &T) -> Self \{
            reqwest::r#async::RequestBuilder::json(self, value)
        }

        fn query<T: serde::Serialize>(self, params: &T) -> Self \{
            reqwest::r#async::RequestBuilder::query(self, params)
        }
    }

    /// HTTP Response.
    #[async_trait::async_trait]
    pub trait Response: Debug + Send + Sized \{
        type Bytes: AsRef<[u8]>;
        type Stream;

        /// Gets the value for the given header name, if any.
        fn header(&self, name: &'static str) -> Option<&str>;

        /// Status code for this response.
        fn status(&self) -> http::status::StatusCode;

        /// Media type for this response body (if any).
        fn media_type(&self) -> Option<mime::MediaType>;

        /// Response body as a stream.
        fn stream(&mut self) -> ResponseStream<Self::Stream>;

        /// Vector of bytes from the response body.
        async fn body_bytes(self) -> Result<(Self, Self::Bytes), ApiError<Self>>;
    }

    #[async_trait::async_trait]
    impl Response for reqwest::r#async::Response \{
        type Bytes = reqwest::r#async::Chunk;
        type Stream = reqwest::r#async::Decoder;

        fn header(&self, name: &'static str) -> Option<&str> \{
            self.headers().get(name).and_then(|v| v.to_str().ok())
        }

        fn status(&self) -> http::status::StatusCode \{
            reqwest::r#async::Response::status(self)
        }

        fn media_type(&self) -> Option<mime::MediaType> \{
            self.header(http::header::CONTENT_TYPE.as_str())
                .and_then(|v| v.parse().ok())
        }

        fn stream(&mut self) -> ResponseStream<Self::Stream> \{
            let body = std::mem::replace(self.body_mut(), reqwest::r#async::Decoder::empty());
            ResponseStream::from(body)
        }

        async fn body_bytes(mut self) -> Result<(Self, Self::Bytes), ApiError<Self>> \{
            let body = std::mem::replace(self.body_mut(), reqwest::r#async::Decoder::empty());
            let bytes = body.concat2().map_err(ApiError::Reqwest).compat().await?;
            Ok((self, bytes))
        }
    }

    /// Represents an API client.
    #[async_trait::async_trait]
    pub trait ApiClient \{
        type Request: Request + Send;
        type Response: Response;

        /// Consumes a method and a relative path and produces a request builder for a single API call.
        fn request_builder(&self, method: http::Method, rel_path: &str) -> Self::Request;

        /// Performs the HTTP request using the given `Request` object
        /// and returns a `Response` future.
        async fn make_request(&self, req: Self::Request) -> Result<Self::Response, ApiError<Self::Response>>;
    }

    #[async_trait::async_trait]
    impl ApiClient for reqwest::r#async::Client \{
        type Request = reqwest::r#async::RequestBuilder;
        type Response = reqwest::r#async::Response;

        fn request_builder(&self, method: http::Method, rel_path: &str) -> Self::Request \{
            let mut u = String::from("{base_url | unescaped}");
            u.push_str(rel_path.trim_start_matches('/'));
            self.request(method, &u)
        }

        async fn make_request(&self, req: Self::Request) -> Result<Self::Response, ApiError<Self::Response>> \{
            let req = req.build().map_err(ApiError::Reqwest)?;
            let resp = self.execute(req).map_err(ApiError::Reqwest).compat().await?;
            Ok(resp)
        }
    }

    /// A trait for indicating that the implementor can send an API call.
    #[async_trait::async_trait]
    pub trait Sendable<Client>
    where
        Client: ApiClient + Sync + 'static,
    \{
        /// The output object from this API request.
        type Output: serde::de::DeserializeOwned;

        /// HTTP method used by this call.
        const METHOD: http::Method;

        /// Relative URL for this API call formatted appropriately with parameter values.
        ///
        /// **NOTE:** This URL **must** begin with `/`.
        fn rel_path(&self) -> std::borrow::Cow<'static, str>;

        /// Modifier for this object. Builders override this method if they
        /// wish to add query parameters, set body, etc.
        fn modify(&self, req: Client::Request) -> Result<Client::Request, ApiError<Client::Response>> \{
            Ok(req)
        }

        /// Sends the request and returns a future for the response object.
        async fn send(&self, client: &Client) -> Result<Self::Output, ApiError<Client::Response>> \{
            let resp = self.send_raw(client).await?;
            let media = resp.media_type();
            if let Some(ty) = media \{
                if media_types::M_0.matches(&ty) \{
                    let (_, bytes) = resp.body_bytes().await?;
                    return serde_json::from_reader(bytes.as_ref()).map_err(ApiError::from)
                }
                else if media_types::M_1.matches(&ty) \{
                    let (_, bytes) = resp.body_bytes().await?;
                    return serde_yaml::from_reader(bytes.as_ref()).map_err(ApiError::from)
                }
            }

            let ty = resp.header(http::header::CONTENT_TYPE.as_str())
                .map(|v| String::from_utf8_lossy(v.as_bytes()).into_owned())
                .unwrap_or_default();
            Err(ApiError::UnsupportedMediaType(ty, Mutex::new(resp)))
        }

        /// Convenience method for returning a raw response after sending a request.
        async fn send_raw(&self, client: &Client) -> Result<Client::Response, ApiError<Client::Response>> \{
            let rel_path = self.rel_path();
            let req = self.modify(client.request_builder(Self::METHOD, &rel_path))?;
            let resp = client.make_request(req).await?;
            if resp.status().is_success() \{
                Ok(resp)
            } else \{
                Err(ApiError::Failure(rel_path.into_owned(), resp.status(), Mutex::new(resp)))
            }
        }
    }

    pub mod media_types \{
        use lazy_static::lazy_static;

        lazy_static! \{
            {{- for coder in media_coders }}
            pub static ref M_{ @index }: mime::MediaRange =
                mime::MediaRange::parse("{coder.range | unescaped}").expect("cannot parse \"{coder.range | unescaped}\" as media range");
            {{- endfor }}
        }
    }
    {{- for coder in media_coders }}

    impl<R: Response + 'static> From<{coder.error_ty_path | unescaped}> for ApiError<R> \{
        fn from(e: {coder.error_ty_path | unescaped}) -> Self \{
            ApiError::{coder.error_variant | unescaped}(e)
        }
    }
    {{- endfor }}
}
