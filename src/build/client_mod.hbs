
pub mod client \{
    use futures::\{Future, future};
    use futures::stream::Stream;
    use parking_lot::Mutex;
    use reqwest::r#async::\{Decoder, Response};
    use serde::de::DeserializeOwned;

    /// Common API errors.
    #[derive(Debug, Fail)]
    pub enum ApiError \{
        #[fail(display = "API request failed for path: \{} (code: \{})", _0, _1)]
        Failure(String, reqwest::StatusCode, Mutex<Response>),
        #[fail(display = "Unsupported media type in response: \{}", _0)]
        UnsupportedMediaType(String, Mutex<Response>),
        #[fail(display = "An error has occurred while performing the API request: \{}", _0)]
        Reqwest(reqwest::Error),
        {{- for coder in media_coders }}
        #[fail(display = "Error en/decoding \"{coder.range | unescaped}\" data: \{}", _0)]
        {coder.error_variant | unescaped}({coder.error_ty_path | unescaped}),
        {{- endfor }}
    }

    /// Represents an API client.
    pub trait ApiClient \{
        /// Consumes a method and a relative path and produces a request builder for a single API call.
        fn request_builder(&self, method: reqwest::Method, rel_path: &str) -> reqwest::r#async::RequestBuilder;

        /// Performs the HTTP request using the given `Request` object
        /// and returns a `Response` future.
        fn make_request(&self, req: reqwest::r#async::Request)
                       -> Box<dyn Future<Item=Response, Error=reqwest::Error> + Send>;
    }

    impl ApiClient for reqwest::r#async::Client \{
        #[inline]
        fn request_builder(&self, method: reqwest::Method, rel_path: &str) -> reqwest::r#async::RequestBuilder \{
            let mut u = String::from("{base_url | unescaped}");
            u.push_str(rel_path.trim_start_matches('/'));
            self.request(method, &u)
        }

        #[inline]
        fn make_request(&self, req: reqwest::r#async::Request)
                       -> Box<dyn Future<Item=Response, Error=reqwest::Error> + Send> \{
            Box::new(self.execute(req)) as Box<_>
        }
    }

    /// A trait for indicating that the implementor can send an API call.
    pub trait Sendable \{
        /// The output object from this API request.
        type Output: DeserializeOwned + Send + 'static;

        /// HTTP method used by this call.
        const METHOD: reqwest::Method;

        /// Relative URL for this API call formatted appropriately with parameter values.
        ///
        /// **NOTE:** This URL **must** begin with `/`.
        fn rel_path(&self) -> std::borrow::Cow<'static, str>;

        /// Modifier for this object. Builders override this method if they
        /// wish to add query parameters, set body, etc.
        fn modify(&self, req: reqwest::r#async::RequestBuilder) -> reqwest::r#async::RequestBuilder \{
            req
        }

        /// Sends the request and returns a future for the response object.
        fn send(&self, client: &dyn ApiClient) -> Box<dyn Future<Item=Self::Output, Error=ApiError> + Send> \{
            Box::new(self.send_raw(client).and_then(|mut resp| -> Box<dyn Future<Item=_, Error=ApiError> + Send> \{
                let value = resp.headers().get(reqwest::header::CONTENT_TYPE);
                let body_concat = |resp: &mut Response| \{
                    let body = std::mem::replace(resp.body_mut(), Decoder::empty());
                    body.concat2().map_err(ApiError::from)
                };

                if let Some(ty) = value.as_ref()
                    .and_then(|v| v.to_str().ok())
                    .and_then(|v| v.parse::<mime::MediaType>().ok())
                \{
                    {{- for coder in media_coders }}
                    {{ if not @first }}else {{ endif }}if media_types::M_{ @index }.matches(&ty) \{
                        return Box::new(body_concat(&mut resp).and_then(|v| \{
                            {coder.decoder | unescaped}(&v).map_err(ApiError::from)
                        })) as Box<_>
                    }
                    {{- endfor }}
                }

                let ty = value
                    .map(|v| String::from_utf8_lossy(v.as_bytes()).into_owned())
                    .unwrap_or_default();
                Box::new(futures::future::err(ApiError::UnsupportedMediaType(ty, Mutex::new(resp)))) as Box<_>
            })) as Box<_>
        }

        /// Convenience method for returning a raw response after sending a request.
        fn send_raw(&self, client: &dyn ApiClient) -> Box<dyn Future<Item=Response, Error=ApiError> + Send> \{
            let rel_path = self.rel_path();
            let builder = self.modify(client.request_builder(Self::METHOD, &rel_path));
            let req = match builder.build() \{
                Ok(r) => r,
                Err(e) => return Box::new(future::err(ApiError::Reqwest(e))),
            };

            Box::new(client.make_request(req).map_err(ApiError::Reqwest).and_then(move |resp| \{
                if resp.status().is_success() \{
                    futures::future::ok(resp)
                } else \{
                    futures::future::err(ApiError::Failure(rel_path.into_owned(), resp.status(), Mutex::new(resp)).into())
                }
            })) as Box<_>
        }
    }

    pub mod media_types \{
        use lazy_static::lazy_static;

        lazy_static! \{
            {{- for coder in media_coders }}
            pub static ref M_{ @index }: mime::MediaRange =
                mime::MediaRange::parse("{coder.range | unescaped}").expect("cannot parse \"{coder.range | unescaped}\" as media range");
            {{- endfor }}
        }
    }

    impl From<reqwest::Error> for ApiError \{
        fn from(e: reqwest::Error) -> Self \{
            ApiError::Reqwest(e)
        }
    }
    {{- for coder in media_coders }}

    impl From<{coder.error_ty_path | unescaped}> for ApiError \{
        fn from(e: {coder.error_ty_path | unescaped}) -> Self \{
            ApiError::{coder.error_variant | unescaped}(e)
        }
    }
    {{- endfor }}
}
