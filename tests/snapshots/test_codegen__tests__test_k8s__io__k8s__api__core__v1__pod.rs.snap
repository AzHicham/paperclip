---
source: tests/test_codegen.rs
expression: data
---

/// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
#[derive(Debug, Default, Clone, Serialize, Deserialize)]
pub struct Pod {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[serde(rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    pub kind: Option<String>,
    /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    pub metadata: Option<crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::object_meta::ObjectMeta>,
    /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    pub spec: Option<crate::codegen::io::k8s::api::core::v1::pod_spec::PodSpec>,
    /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    pub status: Option<crate::codegen::io::k8s::api::core::v1::pod_status::PodStatus>,
}

impl Pod {
    /// Create a builder for this object.
    #[inline]
    pub fn builder() -> PodBuilder {
        PodBuilder {
            body: Default::default(),
        }
    }

    /// create a Pod
    #[inline]
    pub fn create_core_v1_namespaced_pod() -> PodPostBuilder<crate::codegen::generics::MissingNamespace> {
        PodPostBuilder {
            inner: Default::default(),
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// read the specified Pod
    #[inline]
    pub fn read_core_v1_namespaced_pod() -> PodGetBuilder1<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        PodGetBuilder1 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// replace the specified Pod
    #[inline]
    pub fn replace_core_v1_namespaced_pod() -> PodPutBuilder1<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        PodPutBuilder1 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// read status of the specified Pod
    #[inline]
    pub fn read_core_v1_namespaced_pod_status() -> PodGetBuilder2<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        PodGetBuilder2 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// replace status of the specified Pod
    #[inline]
    pub fn replace_core_v1_namespaced_pod_status() -> PodPutBuilder2<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        PodPutBuilder2 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }
}

impl Into<Pod> for PodBuilder {
    fn into(self) -> Pod {
        self.body
    }
}

impl Into<Pod> for PodPostBuilder<crate::codegen::generics::NamespaceExists> {
    fn into(self) -> Pod {
        self.inner.body
    }
}

impl Into<Pod> for PodPutBuilder1<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> Pod {
        self.inner.body
    }
}

impl Into<Pod> for PodPutBuilder2<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> Pod {
        self.inner.body
    }
}

/// Builder for [`Pod`](./struct.Pod.html) object.
#[derive(Debug, Clone)]
pub struct PodBuilder {
    body: self::Pod,
}

impl PodBuilder {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.body.kind = Some(value.into());
        self
    }

    /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    #[inline]
    pub fn metadata(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::object_meta::ObjectMeta) -> Self {
        self.body.metadata = Some(value.into());
        self
    }

    /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn spec(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_spec::PodSpecBuilder<crate::codegen::generics::ContainersExists>) -> Self {
        self.body.spec = Some(value.into());
        self
    }

    /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn status(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_status::PodStatus) -> Self {
        self.body.status = Some(value.into());
        self
    }
}

/// Builder created by [`Pod::create_core_v1_namespaced_pod`](./struct.Pod.html#method.create_core_v1_namespaced_pod) method for a `POST` operation associated with `Pod`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct PodPostBuilder<Namespace> {
    inner: PodPostBuilderContainer,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct PodPostBuilderContainer {
    body: self::Pod,
    param_dry_run: Option<String>,
    param_field_manager: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Namespace> PodPostBuilder<Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    #[inline]
    pub fn field_manager(mut self, value: impl Into<String>) -> Self {
        self.inner.param_field_manager = Some(value.into());
        self
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> PodPostBuilder<crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    #[inline]
    pub fn metadata(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::object_meta::ObjectMeta) -> Self {
        self.inner.body.metadata = Some(value.into());
        self
    }

    /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn spec(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_spec::PodSpecBuilder<crate::codegen::generics::ContainersExists>) -> Self {
        self.inner.body.spec = Some(value.into());
        self
    }

    /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn status(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_status::PodStatus) -> Self {
        self.inner.body.status = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for PodPostBuilder<crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::api::core::v1::pod::Pod;

    const METHOD: http::Method = http::Method::POST;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/pods", namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("fieldManager", self.inner.param_field_manager.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`Pod::read_core_v1_namespaced_pod`](./struct.Pod.html#method.read_core_v1_namespaced_pod) method for a `GET` operation associated with `Pod`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct PodGetBuilder1<Name, Namespace> {
    inner: PodGetBuilder1Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct PodGetBuilder1Container {
    param_exact: Option<bool>,
    param_export: Option<bool>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> PodGetBuilder1<Name, Namespace> {
    /// Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
    #[inline]
    pub fn exact(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_exact = Some(value.into());
        self
    }

    /// Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.
    #[inline]
    pub fn export(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_export = Some(value.into());
        self
    }

    /// name of the Pod
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> PodGetBuilder1<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> PodGetBuilder1<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for PodGetBuilder1<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = Pod;

    const METHOD: http::Method = http::Method::GET;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/pods/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .query(&[
            ("exact", self.inner.param_exact.as_ref().map(std::string::ToString::to_string)),
            ("export", self.inner.param_export.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`Pod::replace_core_v1_namespaced_pod`](./struct.Pod.html#method.replace_core_v1_namespaced_pod) method for a `PUT` operation associated with `Pod`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct PodPutBuilder1<Name, Namespace> {
    inner: PodPutBuilder1Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct PodPutBuilder1Container {
    body: self::Pod,
    param_dry_run: Option<String>,
    param_field_manager: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> PodPutBuilder1<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    #[inline]
    pub fn field_manager(mut self, value: impl Into<String>) -> Self {
        self.inner.param_field_manager = Some(value.into());
        self
    }

    /// name of the Pod
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> PodPutBuilder1<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> PodPutBuilder1<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    #[inline]
    pub fn metadata(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::object_meta::ObjectMeta) -> Self {
        self.inner.body.metadata = Some(value.into());
        self
    }

    /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn spec(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_spec::PodSpecBuilder<crate::codegen::generics::ContainersExists>) -> Self {
        self.inner.body.spec = Some(value.into());
        self
    }

    /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn status(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_status::PodStatus) -> Self {
        self.inner.body.status = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for PodPutBuilder1<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::api::core::v1::pod::Pod;

    const METHOD: http::Method = http::Method::PUT;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/pods/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("fieldManager", self.inner.param_field_manager.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`Pod::read_core_v1_namespaced_pod_status`](./struct.Pod.html#method.read_core_v1_namespaced_pod_status) method for a `GET` operation associated with `Pod`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct PodGetBuilder2<Name, Namespace> {
    inner: PodGetBuilder2Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct PodGetBuilder2Container {
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> PodGetBuilder2<Name, Namespace> {
    /// name of the Pod
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> PodGetBuilder2<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> PodGetBuilder2<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for PodGetBuilder2<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = Pod;

    const METHOD: http::Method = http::Method::GET;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/pods/{name}/status", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .query(&[
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`Pod::replace_core_v1_namespaced_pod_status`](./struct.Pod.html#method.replace_core_v1_namespaced_pod_status) method for a `PUT` operation associated with `Pod`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct PodPutBuilder2<Name, Namespace> {
    inner: PodPutBuilder2Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct PodPutBuilder2Container {
    body: self::Pod,
    param_dry_run: Option<String>,
    param_field_manager: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> PodPutBuilder2<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
    #[inline]
    pub fn field_manager(mut self, value: impl Into<String>) -> Self {
        self.inner.param_field_manager = Some(value.into());
        self
    }

    /// name of the Pod
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> PodPutBuilder2<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> PodPutBuilder2<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    #[inline]
    pub fn metadata(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::object_meta::ObjectMeta) -> Self {
        self.inner.body.metadata = Some(value.into());
        self
    }

    /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn spec(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_spec::PodSpecBuilder<crate::codegen::generics::ContainersExists>) -> Self {
        self.inner.body.spec = Some(value.into());
        self
    }

    /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    #[inline]
    pub fn status(mut self, value: crate::codegen::io::k8s::api::core::v1::pod_status::PodStatus) -> Self {
        self.inner.body.status = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for PodPutBuilder2<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::api::core::v1::pod::Pod;

    const METHOD: http::Method = http::Method::PUT;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/pods/{name}/status", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("fieldManager", self.inner.param_field_manager.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

