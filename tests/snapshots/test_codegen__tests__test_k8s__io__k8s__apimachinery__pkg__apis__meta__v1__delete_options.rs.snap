---
source: tests/test_codegen.rs
expression: data
---

/// DeleteOptions may be provided when deleting an API object.
#[derive(Debug, Default, Clone, Serialize, Deserialize)]
pub struct DeleteOptions {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[serde(rename = "apiVersion")]
    pub api_version: Option<String>,
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[serde(rename = "dryRun")]
    pub dry_run: Option<Vec<String>>,
    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[serde(rename = "gracePeriodSeconds")]
    pub grace_period_seconds: Option<i64>,
    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    pub kind: Option<String>,
    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[serde(rename = "orphanDependents")]
    pub orphan_dependents: Option<bool>,
    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    pub preconditions: Option<crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions>,
    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[serde(rename = "propagationPolicy")]
    pub propagation_policy: Option<String>,
}

impl DeleteOptions {
    /// Create a builder for this object.
    #[inline]
    pub fn builder() -> DeleteOptionsBuilder {
        DeleteOptionsBuilder {
            body: Default::default(),
        }
    }

    /// delete a ConfigMap
    #[inline]
    pub fn delete_core_v1_namespaced_config_map() -> DeleteOptionsDeleteBuilder<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete Endpoints
    #[inline]
    pub fn delete_core_v1_namespaced_endpoints() -> DeleteOptionsDeleteBuilder1<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder1 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete an Event
    #[inline]
    pub fn delete_core_v1_namespaced_event() -> DeleteOptionsDeleteBuilder2<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder2 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a LimitRange
    #[inline]
    pub fn delete_core_v1_namespaced_limit_range() -> DeleteOptionsDeleteBuilder3<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder3 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a PersistentVolumeClaim
    #[inline]
    pub fn delete_core_v1_namespaced_persistent_volume_claim() -> DeleteOptionsDeleteBuilder4<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder4 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Pod
    #[inline]
    pub fn delete_core_v1_namespaced_pod() -> DeleteOptionsDeleteBuilder5<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder5 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a PodTemplate
    #[inline]
    pub fn delete_core_v1_namespaced_pod_template() -> DeleteOptionsDeleteBuilder6<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder6 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ReplicationController
    #[inline]
    pub fn delete_core_v1_namespaced_replication_controller() -> DeleteOptionsDeleteBuilder7<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder7 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ResourceQuota
    #[inline]
    pub fn delete_core_v1_namespaced_resource_quota() -> DeleteOptionsDeleteBuilder8<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder8 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Secret
    #[inline]
    pub fn delete_core_v1_namespaced_secret() -> DeleteOptionsDeleteBuilder9<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder9 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ServiceAccount
    #[inline]
    pub fn delete_core_v1_namespaced_service_account() -> DeleteOptionsDeleteBuilder10<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder10 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Service
    #[inline]
    pub fn delete_core_v1_namespaced_service() -> DeleteOptionsDeleteBuilder11<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder11 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Namespace
    #[inline]
    pub fn delete_core_v1_namespace() -> DeleteOptionsDeleteBuilder12<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder12 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a Node
    #[inline]
    pub fn delete_core_v1_node() -> DeleteOptionsDeleteBuilder13<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder13 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a PersistentVolume
    #[inline]
    pub fn delete_core_v1_persistent_volume() -> DeleteOptionsDeleteBuilder14<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder14 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a MutatingWebhookConfiguration
    #[inline]
    pub fn delete_admissionregistration_v1beta1_mutating_webhook_configuration() -> DeleteOptionsDeleteBuilder15<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder15 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a ValidatingWebhookConfiguration
    #[inline]
    pub fn delete_admissionregistration_v1beta1_validating_webhook_configuration() -> DeleteOptionsDeleteBuilder16<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder16 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a CustomResourceDefinition
    #[inline]
    pub fn delete_apiextensions_v1beta1_custom_resource_definition() -> DeleteOptionsDeleteBuilder17<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder17 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete an APIService
    #[inline]
    pub fn delete_apiregistration_v1api_service() -> DeleteOptionsDeleteBuilder18<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder18 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete an APIService
    #[inline]
    pub fn delete_apiregistration_v1beta1_api_service() -> DeleteOptionsDeleteBuilder19<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder19 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a ControllerRevision
    #[inline]
    pub fn delete_apps_v1_namespaced_controller_revision() -> DeleteOptionsDeleteBuilder20<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder20 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a DaemonSet
    #[inline]
    pub fn delete_apps_v1_namespaced_daemon_set() -> DeleteOptionsDeleteBuilder21<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder21 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Deployment
    #[inline]
    pub fn delete_apps_v1_namespaced_deployment() -> DeleteOptionsDeleteBuilder22<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder22 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ReplicaSet
    #[inline]
    pub fn delete_apps_v1_namespaced_replica_set() -> DeleteOptionsDeleteBuilder23<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder23 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a StatefulSet
    #[inline]
    pub fn delete_apps_v1_namespaced_stateful_set() -> DeleteOptionsDeleteBuilder24<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder24 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ControllerRevision
    #[inline]
    pub fn delete_apps_v1beta1_namespaced_controller_revision() -> DeleteOptionsDeleteBuilder25<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder25 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Deployment
    #[inline]
    pub fn delete_apps_v1beta1_namespaced_deployment() -> DeleteOptionsDeleteBuilder26<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder26 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a StatefulSet
    #[inline]
    pub fn delete_apps_v1beta1_namespaced_stateful_set() -> DeleteOptionsDeleteBuilder27<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder27 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ControllerRevision
    #[inline]
    pub fn delete_apps_v1beta2_namespaced_controller_revision() -> DeleteOptionsDeleteBuilder28<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder28 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a DaemonSet
    #[inline]
    pub fn delete_apps_v1beta2_namespaced_daemon_set() -> DeleteOptionsDeleteBuilder29<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder29 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Deployment
    #[inline]
    pub fn delete_apps_v1beta2_namespaced_deployment() -> DeleteOptionsDeleteBuilder30<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder30 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ReplicaSet
    #[inline]
    pub fn delete_apps_v1beta2_namespaced_replica_set() -> DeleteOptionsDeleteBuilder31<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder31 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a StatefulSet
    #[inline]
    pub fn delete_apps_v1beta2_namespaced_stateful_set() -> DeleteOptionsDeleteBuilder32<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder32 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete an AuditSink
    #[inline]
    pub fn delete_auditregistration_v1alpha1_audit_sink() -> DeleteOptionsDeleteBuilder33<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder33 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a HorizontalPodAutoscaler
    #[inline]
    pub fn delete_autoscaling_v1_namespaced_horizontal_pod_autoscaler() -> DeleteOptionsDeleteBuilder34<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder34 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a HorizontalPodAutoscaler
    #[inline]
    pub fn delete_autoscaling_v2beta1_namespaced_horizontal_pod_autoscaler() -> DeleteOptionsDeleteBuilder35<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder35 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a HorizontalPodAutoscaler
    #[inline]
    pub fn delete_autoscaling_v2beta2_namespaced_horizontal_pod_autoscaler() -> DeleteOptionsDeleteBuilder36<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder36 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Job
    #[inline]
    pub fn delete_batch_v1_namespaced_job() -> DeleteOptionsDeleteBuilder37<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder37 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a CronJob
    #[inline]
    pub fn delete_batch_v1beta1_namespaced_cron_job() -> DeleteOptionsDeleteBuilder38<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder38 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a CronJob
    #[inline]
    pub fn delete_batch_v2alpha1_namespaced_cron_job() -> DeleteOptionsDeleteBuilder39<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder39 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a CertificateSigningRequest
    #[inline]
    pub fn delete_certificates_v1beta1_certificate_signing_request() -> DeleteOptionsDeleteBuilder40<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder40 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a Lease
    #[inline]
    pub fn delete_coordination_v1_namespaced_lease() -> DeleteOptionsDeleteBuilder41<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder41 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Lease
    #[inline]
    pub fn delete_coordination_v1beta1_namespaced_lease() -> DeleteOptionsDeleteBuilder42<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder42 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete an Event
    #[inline]
    pub fn delete_events_v1beta1_namespaced_event() -> DeleteOptionsDeleteBuilder43<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder43 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a DaemonSet
    #[inline]
    pub fn delete_extensions_v1beta1_namespaced_daemon_set() -> DeleteOptionsDeleteBuilder44<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder44 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Deployment
    #[inline]
    pub fn delete_extensions_v1beta1_namespaced_deployment() -> DeleteOptionsDeleteBuilder45<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder45 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete an Ingress
    #[inline]
    pub fn delete_extensions_v1beta1_namespaced_ingress() -> DeleteOptionsDeleteBuilder46<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder46 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a NetworkPolicy
    #[inline]
    pub fn delete_extensions_v1beta1_namespaced_network_policy() -> DeleteOptionsDeleteBuilder47<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder47 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ReplicaSet
    #[inline]
    pub fn delete_extensions_v1beta1_namespaced_replica_set() -> DeleteOptionsDeleteBuilder48<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder48 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a PodSecurityPolicy
    #[inline]
    pub fn delete_extensions_v1beta1_pod_security_policy() -> DeleteOptionsDeleteBuilder49<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder49 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a NetworkPolicy
    #[inline]
    pub fn delete_networking_v1_namespaced_network_policy() -> DeleteOptionsDeleteBuilder50<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder50 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete an Ingress
    #[inline]
    pub fn delete_networking_v1beta1_namespaced_ingress() -> DeleteOptionsDeleteBuilder51<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder51 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a RuntimeClass
    #[inline]
    pub fn delete_node_v1alpha1_runtime_class() -> DeleteOptionsDeleteBuilder52<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder52 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a RuntimeClass
    #[inline]
    pub fn delete_node_v1beta1_runtime_class() -> DeleteOptionsDeleteBuilder53<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder53 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a PodDisruptionBudget
    #[inline]
    pub fn delete_policy_v1beta1_namespaced_pod_disruption_budget() -> DeleteOptionsDeleteBuilder54<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder54 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a PodSecurityPolicy
    #[inline]
    pub fn delete_policy_v1beta1_pod_security_policy() -> DeleteOptionsDeleteBuilder55<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder55 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a ClusterRoleBinding
    #[inline]
    pub fn delete_rbac_authorization_v1_cluster_role_binding() -> DeleteOptionsDeleteBuilder56<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder56 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a ClusterRole
    #[inline]
    pub fn delete_rbac_authorization_v1_cluster_role() -> DeleteOptionsDeleteBuilder57<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder57 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a RoleBinding
    #[inline]
    pub fn delete_rbac_authorization_v1_namespaced_role_binding() -> DeleteOptionsDeleteBuilder58<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder58 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Role
    #[inline]
    pub fn delete_rbac_authorization_v1_namespaced_role() -> DeleteOptionsDeleteBuilder59<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder59 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ClusterRoleBinding
    #[inline]
    pub fn delete_rbac_authorization_v1alpha1_cluster_role_binding() -> DeleteOptionsDeleteBuilder60<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder60 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a ClusterRole
    #[inline]
    pub fn delete_rbac_authorization_v1alpha1_cluster_role() -> DeleteOptionsDeleteBuilder61<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder61 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a RoleBinding
    #[inline]
    pub fn delete_rbac_authorization_v1alpha1_namespaced_role_binding() -> DeleteOptionsDeleteBuilder62<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder62 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Role
    #[inline]
    pub fn delete_rbac_authorization_v1alpha1_namespaced_role() -> DeleteOptionsDeleteBuilder63<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder63 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a ClusterRoleBinding
    #[inline]
    pub fn delete_rbac_authorization_v1beta1_cluster_role_binding() -> DeleteOptionsDeleteBuilder64<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder64 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a ClusterRole
    #[inline]
    pub fn delete_rbac_authorization_v1beta1_cluster_role() -> DeleteOptionsDeleteBuilder65<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder65 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a RoleBinding
    #[inline]
    pub fn delete_rbac_authorization_v1beta1_namespaced_role_binding() -> DeleteOptionsDeleteBuilder66<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder66 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a Role
    #[inline]
    pub fn delete_rbac_authorization_v1beta1_namespaced_role() -> DeleteOptionsDeleteBuilder67<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder67 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a PriorityClass
    #[inline]
    pub fn delete_scheduling_v1_priority_class() -> DeleteOptionsDeleteBuilder68<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder68 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a PriorityClass
    #[inline]
    pub fn delete_scheduling_v1alpha1_priority_class() -> DeleteOptionsDeleteBuilder69<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder69 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a PriorityClass
    #[inline]
    pub fn delete_scheduling_v1beta1_priority_class() -> DeleteOptionsDeleteBuilder70<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder70 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a PodPreset
    #[inline]
    pub fn delete_settings_v1alpha1_namespaced_pod_preset() -> DeleteOptionsDeleteBuilder71<crate::codegen::generics::MissingName, crate::codegen::generics::MissingNamespace> {
        DeleteOptionsDeleteBuilder71 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
            _param_namespace: core::marker::PhantomData,
        }
    }

    /// delete a StorageClass
    #[inline]
    pub fn delete_storage_v1_storage_class() -> DeleteOptionsDeleteBuilder72<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder72 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a VolumeAttachment
    #[inline]
    pub fn delete_storage_v1_volume_attachment() -> DeleteOptionsDeleteBuilder73<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder73 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a VolumeAttachment
    #[inline]
    pub fn delete_storage_v1alpha1_volume_attachment() -> DeleteOptionsDeleteBuilder74<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder74 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a CSIDriver
    #[inline]
    pub fn delete_storage_v1beta1_csi_driver() -> DeleteOptionsDeleteBuilder75<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder75 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a CSINode
    #[inline]
    pub fn delete_storage_v1beta1_csi_node() -> DeleteOptionsDeleteBuilder76<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder76 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a StorageClass
    #[inline]
    pub fn delete_storage_v1beta1_storage_class() -> DeleteOptionsDeleteBuilder77<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder77 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }

    /// delete a VolumeAttachment
    #[inline]
    pub fn delete_storage_v1beta1_volume_attachment() -> DeleteOptionsDeleteBuilder78<crate::codegen::generics::MissingName> {
        DeleteOptionsDeleteBuilder78 {
            inner: Default::default(),
            _param_name: core::marker::PhantomData,
        }
    }
}

impl Into<DeleteOptions> for DeleteOptionsBuilder {
    fn into(self) -> DeleteOptions {
        self.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder1<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder2<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder3<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder4<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder5<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder6<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder7<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder8<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder9<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder10<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder11<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder12<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder13<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder14<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder15<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder16<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder17<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder18<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder19<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder20<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder21<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder22<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder23<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder24<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder25<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder26<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder27<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder28<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder29<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder30<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder31<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder32<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder33<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder34<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder35<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder36<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder37<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder38<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder39<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder40<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder41<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder42<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder43<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder44<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder45<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder46<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder47<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder48<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder49<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder50<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder51<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder52<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder53<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder54<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder55<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder56<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder57<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder58<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder59<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder60<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder61<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder62<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder63<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder64<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder65<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder66<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder67<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder68<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder69<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder70<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder71<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder72<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder73<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder74<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder75<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder76<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder77<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

impl Into<DeleteOptions> for DeleteOptionsDeleteBuilder78<crate::codegen::generics::NameExists> {
    fn into(self) -> DeleteOptions {
        self.inner.body
    }
}

/// Builder for [`DeleteOptions`](./struct.DeleteOptions.html) object.
#[derive(Debug, Clone)]
pub struct DeleteOptionsBuilder {
    body: self::DeleteOptions,
}

impl DeleteOptionsBuilder {
    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.body.api_version = Some(value.into());
        self
    }

    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Iterator<Item = impl Into<String>>) -> Self {
        self.body.dry_run = Some(value.map(|value| value.into()).collect::<Vec<_>>().into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.body.grace_period_seconds = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.body.kind = Some(value.into());
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.body.orphan_dependents = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.body.preconditions = Some(value.into());
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.body.propagation_policy = Some(value.into());
        self
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_config_map`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_config_map) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilderContainer,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilderContainer {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ConfigMap
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/configmaps/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_endpoints`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_endpoints) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder1<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder1Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder1Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder1<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Endpoints
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder1<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder1<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder1<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/endpoints/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_event`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_event) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder2<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder2Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder2Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder2<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Event
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder2<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder2<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder2<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/events/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_limit_range`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_limit_range) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder3<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder3Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder3Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder3<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the LimitRange
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder3<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder3<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder3<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/limitranges/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_persistent_volume_claim`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_persistent_volume_claim) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder4<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder4Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder4Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder4<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PersistentVolumeClaim
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder4<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder4<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder4<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_pod`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_pod) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder5<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder5Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder5Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder5<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Pod
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder5<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder5<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder5<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/pods/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_pod_template`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_pod_template) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder6<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder6Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder6Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder6<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PodTemplate
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder6<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder6<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder6<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/podtemplates/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_replication_controller`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_replication_controller) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder7<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder7Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder7Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder7<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ReplicationController
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder7<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder7<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder7<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_resource_quota`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_resource_quota) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder8<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder8Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder8Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder8<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ResourceQuota
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder8<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder8<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder8<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/resourcequotas/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_secret`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_secret) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder9<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder9Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder9Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder9<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Secret
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder9<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder9<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder9<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/secrets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_service_account`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_service_account) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder10<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder10Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder10Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder10<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ServiceAccount
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder10<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder10<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder10<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/serviceaccounts/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespaced_service`](./struct.DeleteOptions.html#method.delete_core_v1_namespaced_service) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder11<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder11Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder11Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder11<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Service
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder11<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder11<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder11<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{namespace}/services/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_namespace`](./struct.DeleteOptions.html#method.delete_core_v1_namespace) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder12<Name> {
    inner: DeleteOptionsDeleteBuilder12Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder12Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder12<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Namespace
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder12<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder12<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/namespaces/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_node`](./struct.DeleteOptions.html#method.delete_core_v1_node) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder13<Name> {
    inner: DeleteOptionsDeleteBuilder13Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder13Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder13<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Node
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder13<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder13<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/nodes/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_core_v1_persistent_volume`](./struct.DeleteOptions.html#method.delete_core_v1_persistent_volume) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder14<Name> {
    inner: DeleteOptionsDeleteBuilder14Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder14Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder14<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PersistentVolume
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder14<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder14<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/api/v1/persistentvolumes/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_admissionregistration_v1beta1_mutating_webhook_configuration`](./struct.DeleteOptions.html#method.delete_admissionregistration_v1beta1_mutating_webhook_configuration) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder15<Name> {
    inner: DeleteOptionsDeleteBuilder15Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder15Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder15<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the MutatingWebhookConfiguration
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder15<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder15<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_admissionregistration_v1beta1_validating_webhook_configuration`](./struct.DeleteOptions.html#method.delete_admissionregistration_v1beta1_validating_webhook_configuration) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder16<Name> {
    inner: DeleteOptionsDeleteBuilder16Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder16Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder16<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ValidatingWebhookConfiguration
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder16<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder16<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apiextensions_v1beta1_custom_resource_definition`](./struct.DeleteOptions.html#method.delete_apiextensions_v1beta1_custom_resource_definition) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder17<Name> {
    inner: DeleteOptionsDeleteBuilder17Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder17Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder17<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the CustomResourceDefinition
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder17<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder17<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apiregistration_v1api_service`](./struct.DeleteOptions.html#method.delete_apiregistration_v1api_service) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder18<Name> {
    inner: DeleteOptionsDeleteBuilder18Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder18Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder18<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the APIService
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder18<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder18<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apiregistration.k8s.io/v1/apiservices/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apiregistration_v1beta1_api_service`](./struct.DeleteOptions.html#method.delete_apiregistration_v1beta1_api_service) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder19<Name> {
    inner: DeleteOptionsDeleteBuilder19Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder19Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder19<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the APIService
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder19<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder19<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1_namespaced_controller_revision`](./struct.DeleteOptions.html#method.delete_apps_v1_namespaced_controller_revision) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder20<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder20Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder20Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder20<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ControllerRevision
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder20<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder20<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder20<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1_namespaced_daemon_set`](./struct.DeleteOptions.html#method.delete_apps_v1_namespaced_daemon_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder21<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder21Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder21Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder21<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the DaemonSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder21<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder21<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder21<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1_namespaced_deployment`](./struct.DeleteOptions.html#method.delete_apps_v1_namespaced_deployment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder22<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder22Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder22Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder22<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Deployment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder22<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder22<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder22<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1/namespaces/{namespace}/deployments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1_namespaced_replica_set`](./struct.DeleteOptions.html#method.delete_apps_v1_namespaced_replica_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder23<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder23Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder23Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder23<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ReplicaSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder23<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder23<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder23<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1/namespaces/{namespace}/replicasets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1_namespaced_stateful_set`](./struct.DeleteOptions.html#method.delete_apps_v1_namespaced_stateful_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder24<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder24Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder24Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder24<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the StatefulSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder24<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder24<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder24<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta1_namespaced_controller_revision`](./struct.DeleteOptions.html#method.delete_apps_v1beta1_namespaced_controller_revision) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder25<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder25Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder25Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder25<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ControllerRevision
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder25<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder25<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder25<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta1_namespaced_deployment`](./struct.DeleteOptions.html#method.delete_apps_v1beta1_namespaced_deployment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder26<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder26Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder26Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder26<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Deployment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder26<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder26<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder26<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta1_namespaced_stateful_set`](./struct.DeleteOptions.html#method.delete_apps_v1beta1_namespaced_stateful_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder27<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder27Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder27Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder27<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the StatefulSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder27<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder27<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder27<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta2_namespaced_controller_revision`](./struct.DeleteOptions.html#method.delete_apps_v1beta2_namespaced_controller_revision) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder28<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder28Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder28Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder28<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ControllerRevision
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder28<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder28<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder28<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta2_namespaced_daemon_set`](./struct.DeleteOptions.html#method.delete_apps_v1beta2_namespaced_daemon_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder29<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder29Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder29Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder29<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the DaemonSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder29<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder29<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder29<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta2_namespaced_deployment`](./struct.DeleteOptions.html#method.delete_apps_v1beta2_namespaced_deployment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder30<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder30Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder30Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder30<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Deployment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder30<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder30<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder30<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta2_namespaced_replica_set`](./struct.DeleteOptions.html#method.delete_apps_v1beta2_namespaced_replica_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder31<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder31Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder31Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder31<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ReplicaSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder31<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder31<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder31<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_apps_v1beta2_namespaced_stateful_set`](./struct.DeleteOptions.html#method.delete_apps_v1beta2_namespaced_stateful_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder32<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder32Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder32Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder32<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the StatefulSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder32<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder32<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder32<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_auditregistration_v1alpha1_audit_sink`](./struct.DeleteOptions.html#method.delete_auditregistration_v1alpha1_audit_sink) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder33<Name> {
    inner: DeleteOptionsDeleteBuilder33Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder33Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder33<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the AuditSink
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder33<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder33<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/auditregistration.k8s.io/v1alpha1/auditsinks/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_autoscaling_v1_namespaced_horizontal_pod_autoscaler`](./struct.DeleteOptions.html#method.delete_autoscaling_v1_namespaced_horizontal_pod_autoscaler) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder34<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder34Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder34Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder34<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the HorizontalPodAutoscaler
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder34<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder34<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder34<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_autoscaling_v2beta1_namespaced_horizontal_pod_autoscaler`](./struct.DeleteOptions.html#method.delete_autoscaling_v2beta1_namespaced_horizontal_pod_autoscaler) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder35<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder35Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder35Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder35<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the HorizontalPodAutoscaler
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder35<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder35<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder35<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_autoscaling_v2beta2_namespaced_horizontal_pod_autoscaler`](./struct.DeleteOptions.html#method.delete_autoscaling_v2beta2_namespaced_horizontal_pod_autoscaler) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder36<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder36Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder36Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder36<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the HorizontalPodAutoscaler
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder36<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder36<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder36<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_batch_v1_namespaced_job`](./struct.DeleteOptions.html#method.delete_batch_v1_namespaced_job) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder37<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder37Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder37Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder37<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Job
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder37<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder37<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder37<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/batch/v1/namespaces/{namespace}/jobs/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_batch_v1beta1_namespaced_cron_job`](./struct.DeleteOptions.html#method.delete_batch_v1beta1_namespaced_cron_job) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder38<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder38Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder38Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder38<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the CronJob
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder38<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder38<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder38<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_batch_v2alpha1_namespaced_cron_job`](./struct.DeleteOptions.html#method.delete_batch_v2alpha1_namespaced_cron_job) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder39<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder39Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder39Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder39<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the CronJob
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder39<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder39<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder39<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_certificates_v1beta1_certificate_signing_request`](./struct.DeleteOptions.html#method.delete_certificates_v1beta1_certificate_signing_request) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder40<Name> {
    inner: DeleteOptionsDeleteBuilder40Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder40Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder40<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the CertificateSigningRequest
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder40<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder40<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_coordination_v1_namespaced_lease`](./struct.DeleteOptions.html#method.delete_coordination_v1_namespaced_lease) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder41<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder41Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder41Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder41<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Lease
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder41<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder41<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder41<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_coordination_v1beta1_namespaced_lease`](./struct.DeleteOptions.html#method.delete_coordination_v1beta1_namespaced_lease) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder42<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder42Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder42Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder42<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Lease
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder42<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder42<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder42<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_events_v1beta1_namespaced_event`](./struct.DeleteOptions.html#method.delete_events_v1beta1_namespaced_event) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder43<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder43Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder43Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder43<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Event
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder43<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder43<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder43<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_extensions_v1beta1_namespaced_daemon_set`](./struct.DeleteOptions.html#method.delete_extensions_v1beta1_namespaced_daemon_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder44<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder44Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder44Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder44<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the DaemonSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder44<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder44<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder44<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_extensions_v1beta1_namespaced_deployment`](./struct.DeleteOptions.html#method.delete_extensions_v1beta1_namespaced_deployment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder45<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder45Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder45Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder45<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Deployment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder45<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder45<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder45<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_extensions_v1beta1_namespaced_ingress`](./struct.DeleteOptions.html#method.delete_extensions_v1beta1_namespaced_ingress) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder46<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder46Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder46Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder46<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Ingress
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder46<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder46<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder46<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_extensions_v1beta1_namespaced_network_policy`](./struct.DeleteOptions.html#method.delete_extensions_v1beta1_namespaced_network_policy) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder47<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder47Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder47Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder47<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the NetworkPolicy
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder47<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder47<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder47<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_extensions_v1beta1_namespaced_replica_set`](./struct.DeleteOptions.html#method.delete_extensions_v1beta1_namespaced_replica_set) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder48<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder48Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder48Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder48<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ReplicaSet
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder48<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder48<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder48<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_extensions_v1beta1_pod_security_policy`](./struct.DeleteOptions.html#method.delete_extensions_v1beta1_pod_security_policy) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder49<Name> {
    inner: DeleteOptionsDeleteBuilder49Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder49Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder49<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PodSecurityPolicy
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder49<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder49<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/extensions/v1beta1/podsecuritypolicies/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_networking_v1_namespaced_network_policy`](./struct.DeleteOptions.html#method.delete_networking_v1_namespaced_network_policy) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder50<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder50Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder50Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder50<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the NetworkPolicy
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder50<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder50<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder50<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_networking_v1beta1_namespaced_ingress`](./struct.DeleteOptions.html#method.delete_networking_v1beta1_namespaced_ingress) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder51<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder51Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder51Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder51<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Ingress
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder51<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder51<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder51<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_node_v1alpha1_runtime_class`](./struct.DeleteOptions.html#method.delete_node_v1alpha1_runtime_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder52<Name> {
    inner: DeleteOptionsDeleteBuilder52Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder52Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder52<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the RuntimeClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder52<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder52<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_node_v1beta1_runtime_class`](./struct.DeleteOptions.html#method.delete_node_v1beta1_runtime_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder53<Name> {
    inner: DeleteOptionsDeleteBuilder53Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder53Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder53<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the RuntimeClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder53<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder53<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/node.k8s.io/v1beta1/runtimeclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_policy_v1beta1_namespaced_pod_disruption_budget`](./struct.DeleteOptions.html#method.delete_policy_v1beta1_namespaced_pod_disruption_budget) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder54<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder54Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder54Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder54<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PodDisruptionBudget
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder54<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder54<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder54<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_policy_v1beta1_pod_security_policy`](./struct.DeleteOptions.html#method.delete_policy_v1beta1_pod_security_policy) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder55<Name> {
    inner: DeleteOptionsDeleteBuilder55Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder55Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder55<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PodSecurityPolicy
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder55<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder55<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/policy/v1beta1/podsecuritypolicies/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1_cluster_role_binding`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1_cluster_role_binding) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder56<Name> {
    inner: DeleteOptionsDeleteBuilder56Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder56Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder56<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ClusterRoleBinding
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder56<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder56<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1_cluster_role`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1_cluster_role) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder57<Name> {
    inner: DeleteOptionsDeleteBuilder57Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder57Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder57<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ClusterRole
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder57<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder57<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1_namespaced_role_binding`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1_namespaced_role_binding) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder58<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder58Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder58Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder58<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the RoleBinding
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder58<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder58<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder58<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1_namespaced_role`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1_namespaced_role) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder59<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder59Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder59Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder59<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Role
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder59<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder59<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder59<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1alpha1_cluster_role_binding`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1alpha1_cluster_role_binding) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder60<Name> {
    inner: DeleteOptionsDeleteBuilder60Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder60Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder60<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ClusterRoleBinding
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder60<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder60<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1alpha1_cluster_role`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1alpha1_cluster_role) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder61<Name> {
    inner: DeleteOptionsDeleteBuilder61Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder61Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder61<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ClusterRole
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder61<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder61<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1alpha1_namespaced_role_binding`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1alpha1_namespaced_role_binding) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder62<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder62Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder62Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder62<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the RoleBinding
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder62<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder62<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder62<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1alpha1_namespaced_role`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1alpha1_namespaced_role) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder63<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder63Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder63Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder63<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Role
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder63<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder63<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder63<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1beta1_cluster_role_binding`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1beta1_cluster_role_binding) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder64<Name> {
    inner: DeleteOptionsDeleteBuilder64Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder64Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder64<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ClusterRoleBinding
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder64<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder64<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1beta1_cluster_role`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1beta1_cluster_role) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder65<Name> {
    inner: DeleteOptionsDeleteBuilder65Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder65Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder65<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the ClusterRole
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder65<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder65<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1beta1_namespaced_role_binding`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1beta1_namespaced_role_binding) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder66<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder66Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder66Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder66<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the RoleBinding
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder66<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder66<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder66<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_rbac_authorization_v1beta1_namespaced_role`](./struct.DeleteOptions.html#method.delete_rbac_authorization_v1beta1_namespaced_role) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder67<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder67Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder67Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder67<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the Role
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder67<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder67<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder67<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_scheduling_v1_priority_class`](./struct.DeleteOptions.html#method.delete_scheduling_v1_priority_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder68<Name> {
    inner: DeleteOptionsDeleteBuilder68Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder68Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder68<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PriorityClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder68<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder68<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/scheduling.k8s.io/v1/priorityclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_scheduling_v1alpha1_priority_class`](./struct.DeleteOptions.html#method.delete_scheduling_v1alpha1_priority_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder69<Name> {
    inner: DeleteOptionsDeleteBuilder69Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder69Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder69<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PriorityClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder69<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder69<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_scheduling_v1beta1_priority_class`](./struct.DeleteOptions.html#method.delete_scheduling_v1beta1_priority_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder70<Name> {
    inner: DeleteOptionsDeleteBuilder70Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder70Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder70<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PriorityClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder70<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder70<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_settings_v1alpha1_namespaced_pod_preset`](./struct.DeleteOptions.html#method.delete_settings_v1alpha1_namespaced_pod_preset) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder71<Name, Namespace> {
    inner: DeleteOptionsDeleteBuilder71Container,
    _param_name: core::marker::PhantomData<Name>,
    _param_namespace: core::marker::PhantomData<Namespace>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder71Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_namespace: Option<String>,
    param_pretty: Option<String>,
}

impl<Name, Namespace> DeleteOptionsDeleteBuilder71<Name, Namespace> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the PodPreset
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder71<crate::codegen::generics::NameExists, Namespace> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// object name and auth scope, such as for teams and projects
    #[inline]
    pub fn namespace(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder71<Name, crate::codegen::generics::NamespaceExists> {
        self.inner.param_namespace = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder71<crate::codegen::generics::NameExists, crate::codegen::generics::NamespaceExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?"), namespace=self.inner.param_namespace.as_ref().expect("missing parameter namespace?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1_storage_class`](./struct.DeleteOptions.html#method.delete_storage_v1_storage_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder72<Name> {
    inner: DeleteOptionsDeleteBuilder72Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder72Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder72<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the StorageClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder72<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder72<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1/storageclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1_volume_attachment`](./struct.DeleteOptions.html#method.delete_storage_v1_volume_attachment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder73<Name> {
    inner: DeleteOptionsDeleteBuilder73Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder73Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder73<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the VolumeAttachment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder73<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder73<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1/volumeattachments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1alpha1_volume_attachment`](./struct.DeleteOptions.html#method.delete_storage_v1alpha1_volume_attachment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder74<Name> {
    inner: DeleteOptionsDeleteBuilder74Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder74Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder74<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the VolumeAttachment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder74<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder74<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1beta1_csi_driver`](./struct.DeleteOptions.html#method.delete_storage_v1beta1_csi_driver) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder75<Name> {
    inner: DeleteOptionsDeleteBuilder75Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder75Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder75<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the CSIDriver
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder75<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder75<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1beta1/csidrivers/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1beta1_csi_node`](./struct.DeleteOptions.html#method.delete_storage_v1beta1_csi_node) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder76<Name> {
    inner: DeleteOptionsDeleteBuilder76Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder76Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder76<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the CSINode
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder76<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder76<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1beta1/csinodes/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1beta1_storage_class`](./struct.DeleteOptions.html#method.delete_storage_v1beta1_storage_class) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder77<Name> {
    inner: DeleteOptionsDeleteBuilder77Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder77Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder77<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the StorageClass
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder77<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder77<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1beta1/storageclasses/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

/// Builder created by [`DeleteOptions::delete_storage_v1beta1_volume_attachment`](./struct.DeleteOptions.html#method.delete_storage_v1beta1_volume_attachment) method for a `DELETE` operation associated with `DeleteOptions`.
#[repr(transparent)]
#[derive(Debug, Clone)]
pub struct DeleteOptionsDeleteBuilder78<Name> {
    inner: DeleteOptionsDeleteBuilder78Container,
    _param_name: core::marker::PhantomData<Name>,
}

#[derive(Debug, Default, Clone)]
struct DeleteOptionsDeleteBuilder78Container {
    body: self::DeleteOptions,
    param_dry_run: Option<String>,
    param_grace_period_seconds: Option<i64>,
    param_orphan_dependents: Option<bool>,
    param_propagation_policy: Option<String>,
    param_name: Option<String>,
    param_pretty: Option<String>,
}

impl<Name> DeleteOptionsDeleteBuilder78<Name> {
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    #[inline]
    pub fn dry_run(mut self, value: impl Into<String>) -> Self {
        self.inner.param_dry_run = Some(value.into());
        self
    }

    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    #[inline]
    pub fn grace_period_seconds(mut self, value: impl Into<i64>) -> Self {
        self.inner.param_grace_period_seconds = Some({
            let val = value.into();
            self.inner.body.grace_period_seconds = val.clone().into();
            val
        });
        self
    }

    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    #[inline]
    pub fn orphan_dependents(mut self, value: impl Into<bool>) -> Self {
        self.inner.param_orphan_dependents = Some({
            let val = value.into();
            self.inner.body.orphan_dependents = val.clone().into();
            val
        });
        self
    }

    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    #[inline]
    pub fn propagation_policy(mut self, value: impl Into<String>) -> Self {
        self.inner.param_propagation_policy = Some({
            let val = value.into();
            self.inner.body.propagation_policy = val.clone().into();
            val
        });
        self
    }

    /// name of the VolumeAttachment
    #[inline]
    pub fn name(mut self, value: impl Into<String>) -> DeleteOptionsDeleteBuilder78<crate::codegen::generics::NameExists> {
        self.inner.param_name = Some(value.into());
        unsafe { std::mem::transmute(self) }
    }

    /// If 'true', then the output is pretty printed.
    #[inline]
    pub fn pretty(mut self, value: impl Into<String>) -> Self {
        self.inner.param_pretty = Some(value.into());
        self
    }

    /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    #[inline]
    pub fn api_version(mut self, value: impl Into<String>) -> Self {
        self.inner.body.api_version = Some(value.into());
        self
    }

    /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    #[inline]
    pub fn kind(mut self, value: impl Into<String>) -> Self {
        self.inner.body.kind = Some(value.into());
        self
    }

    /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    #[inline]
    pub fn preconditions(mut self, value: crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::preconditions::Preconditions) -> Self {
        self.inner.body.preconditions = Some(value.into());
        self
    }
}

impl<Client: crate::codegen::client::ApiClient + Sync + 'static> crate::codegen::client::Sendable<Client> for DeleteOptionsDeleteBuilder78<crate::codegen::generics::NameExists> {
    type Output = crate::codegen::io::k8s::apimachinery::pkg::apis::meta::v1::status::Status;

    const METHOD: http::Method = http::Method::DELETE;

    fn rel_path(&self) -> std::borrow::Cow<'static, str> {
        format!("/apis/storage.k8s.io/v1beta1/volumeattachments/{name}", name=self.inner.param_name.as_ref().expect("missing parameter name?")).into()
    }

    fn modify(&self, req: Client::Request) -> Result<Client::Request, crate::codegen::client::ApiError<Client::Response>> {
        use crate::codegen::client::Request;
        Ok(req
        .json(&self.inner.body)
        .query(&[
            ("dryRun", self.inner.param_dry_run.as_ref().map(std::string::ToString::to_string)),
            ("gracePeriodSeconds", self.inner.param_grace_period_seconds.as_ref().map(std::string::ToString::to_string)),
            ("orphanDependents", self.inner.param_orphan_dependents.as_ref().map(std::string::ToString::to_string)),
            ("propagationPolicy", self.inner.param_propagation_policy.as_ref().map(std::string::ToString::to_string)),
            ("pretty", self.inner.param_pretty.as_ref().map(std::string::ToString::to_string))
        ]))
    }
}

